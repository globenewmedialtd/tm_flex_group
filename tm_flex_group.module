<?php

/**
 * @file
 * The TM Flex Group Core.
 */

use Drupal\block\Entity\Block;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\group\Entity\Group;
use Drupal\group\Entity\GroupInterface;
use Drupal\group\Entity\GroupContent;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\Plugin\views\row\EntityRow;
use Drupal\views\ViewExecutable;
use Drupal\views\Views;
use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\Core\Url;
use Drupal\tm_flex_group\EntityAccessHelper;
use Drupal\node\NodeInterface;

 /**
 * Helper function to get Flexible group types
 */
function tm_flex_group_get_flexible_group_types() {

  $flexible_group_types = [
    'flexible_group' => 'flexible_group',
    'tm_training' => 'tm_training',
    'tm_community' => 'tm_community',
    'tm_conference' => 'tm_conference'
  ];

  return $flexible_group_types;

}

 /**
 * Helper function to get All group types
 */
function tm_flex_group_get_group_types() {

  $group_types = [
    'flexible_group',
    'closed_group',
    'open_group'
  ];

  // Add secret group to $group_types
  if (\Drupal::moduleHandler()->moduleExists('social_group_secret')) {
    array_push($group_types, 'secret_group');
  }

  // Add tm_training group to $group_types  
  if (\Drupal::moduleHandler()->moduleExists('tm_flex_group_training')) {
    array_push($group_types, 'tm_training');
  }  

  // Add tm_community group to $group_types  
  if (\Drupal::moduleHandler()->moduleExists('tm_flex_group_community')) {
    array_push($group_types, 'tm_community');
  }  

  // Add tm_community group to $group_types  
  if (\Drupal::moduleHandler()->moduleExists('tm_flex_group_conference')) {
    array_push($group_types, 'tm_conference');
  } 

  return $group_types;

}

/**
 * Implements hook_menu_local_actions_alter().
 */
function tm_flex_group_menu_local_actions_alter(&$local_actions) {
  $group = _social_group_get_current_group();
  $user = \Drupal::currentUser();


  // Remove the social_group add member action on the
  // membership overview if we can't add members directly.
  // SM+ can still add members though.
  if ($group instanceof GroupInterface
    && in_array($group->getGroupType()->id(), 
    tm_flex_group_get_flexible_group_types())
    && !social_group_flexible_group_can_be_added($group)
    && !$user->hasPermission('manage all groups')
    && !$group->hasPermission('administer members', $user)
  ) {
    unset($local_actions['social_group.add_member']);
  }
}

/**
 * Implements hook_block_access().
 */
function tm_flex_group_block_access(Block $block, $operation, AccountInterface $account) {
  // This is a list of the blocks that this function cares about, if we're being
  // called for a different block we exit early.
  $block_id = $block->getPluginId();
  $managed_blocks = [
    'views_exposed_filter_block:newest_groups-page_all_groups',
    'views_block:groups-block_user_groups',
    'views_block:upcoming_events-upcoming_events_group',
    'views_block:latest_topics-group_topics_block',
    'views_block:group_managers-block_list_managers',
  ];
  // We don't care for other blocks.
  if (!in_array($block_id, $managed_blocks, FALSE)) {
    return AccessResult::neutral();
  }

  $group = _social_group_get_current_group();
  // We don't care about other group types in here.
  if ($group && in_array($group->getGroupType()->id(),tm_flex_group_get_flexible_group_types())) {
    // Only when users cant join directly, add the managers block
    // so they know who to contact.
    if ($operation === 'view' &&
      social_group_flexible_group_can_join_directly($group) &&
      $block->getPluginId() === 'views_block:group_managers-block_list_managers') {
      return AccessResult::forbidden();
    }

    // All users with permissions can see the rest.
    if ($account->hasPermission('manage all groups')) {
      return AccessResult::neutral();
    }

    if (!$group->getMember($account) &&
      !social_group_flexible_group_community_enabled($group) &&
      !social_group_flexible_group_public_enabled($group)) {
      // If it is flexible and the current user is not an member of this group,
      // and content visibility is not public and also not community
      // hide it.
      $forbidden_blocks = [
        'views_block:upcoming_events-upcoming_events_group',
        'views_block:latest_topics-group_topics_block',
      ];
      foreach ($forbidden_blocks as $forbidden_block) {
        if ($operation === 'view' && $block->getPluginId() === $forbidden_block) {
          return AccessResult::forbidden();
        }
      }
    }
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_node_access().
 */
function tm_flex_group_node_access(NodeInterface $node, $op, AccountInterface $account) {
  return EntityAccessHelper::getEntityAccessResult($node, $op, $account);
}

/**
 * Provide a method to alter the allowed content visibility for a group type.
 *
 * @param array $visibilities
 *   The visibilities list.
 * @param string $group_type_id
 *   The group type we alter the visibility setting for.
 *
 * @see social_group_get_allowed_visibility_options_per_group_type()
 *
 * @ingroup social_group_api
 */
function tm_flex_group_social_group_allowed_visibilities_alter(array &$visibilities, $group_type_id) {
  
  $flexible_group_types = tm_flex_group_get_flexible_group_types();
  // Remove the default flexible_group
  unset($flexible_group_types['flexible_group']);

  if (in_array($group_type_id,$flexible_group_types)) {

    $group = _social_group_get_current_group();

    if ($group !== NULL) {
      // Set all visibilities for that group to FALSE
      foreach($visibilities as $visibility => $value) {
        $visibilities[$visibility] = FALSE;
      }
            
      // Try to retrieve allowed options from Group directly.
      $allowed_options = $group->get('field_group_allowed_visibility')->getValue();
      foreach ($allowed_options as $option) {
        $value = $option['value'];
        $visibilities[$value] = TRUE;
      }      
    }
  }
}

/**
 * Implements hook_theme_registry_alter
 * This is needed because social_group uses hook_preprocess_HOOK!
 * {@inheritdoc}
 */
function tm_flex_group_theme_registry_alter(&$theme_registry) {
  $theme_registry['group__hero']['preprocess functions'] = [
    0 => 'social_group_preprocess_group__hero',
    1 => 'tm_flex_group_preprocess_group__hero'
  ];
}


/**
 * Implements hook_preprocess_HOOK().
 */
function tm_flex_group_preprocess_group__hero(array &$variables) {

  /** @var \Drupal\group\Entity\GroupInterface $group */
  $group = $variables['group'];
  $account = \Drupal::currentUser();

  $tm_flex_groups = tm_flex_group_get_flexible_group_types();
  unset($tm_flex_groups['flexible_group']);

  if (in_array($group->bundle(),$tm_flex_groups)) {

    // Render the group settings help, gear icon with popover.
    $group_settings_help = _tm_flex_group_render_group_settings_hero($group);
  }
  else {

    // Render the group settings help, gear icon with popover.
    $group_settings_help = _social_group_render_group_settings_hero($group);

    if ($group->bundle() == 'public_group' && $account->isAnonymous()) {
      $variables['group_operations_url'] = Url::fromRoute('user.register', [], [
        'query' => [
          'destination' => Url::fromRoute('entity.group.join', [
            'group' => $group->id(),
          ])->toString(),
        ],
      ])->toString();
    }

   

  }
  
  $variables['group_settings_help'] = \Drupal::service('renderer')->renderPlain($group_settings_help);

}


/**
 * Get the join methods of a group.
 *
 * @param \Drupal\group\Entity\GroupInterface $group
 *   the Group interface.
 *
 * @return array
 *   Returns join methods of a group.
 */
function _tm_flex_group_get_join_methods(GroupInterface $group) {
  $group_type = $group->getGroupType();
  $group_type_id = $group_type->id();
  $join_methods = [];

  if ($group_type_id == 'tm_training' || 
      $group_type_id == 'tm_community' ||
      $group_type_id == 'tm_conference') {

      // Try to retrieve join methods from Group directly.
      $allowed_options = $group->get('field_group_allowed_join_method')
        ->getValue();
      foreach ($allowed_options as $option) {
        // Lets grab the value from the selected radio item.
        if (!empty($option['value']) && is_string($option['value'])) {
          $join_methods[$option['value']] = social_group_allowed_join_method_description($option['value']);
        }
      }


  }

  return $join_methods;

}

/**
 * Get the group visibility label of a group.
 *
 * @param \Drupal\group\Entity\GroupInterface $group
 *   the Group interface.
 * @param string $field_name
 *   The field name of the visibility field for a group type.
 *
 * @return array
 *   Returns the visibility options of a group.
 */
function _tm_flex_group_get_group_visibility(GroupInterface $group, $field_name = NULL) {
  $group_type = $group->getGroupType();
  $group_type_id = $group_type->id();
  $group_visibility = [];


  if ($group_type_id == 'tm_training' || 
      $group_type_id == 'tm_community' ||
      $group_type_id == 'tm_conference') {

      if ($group->hasField('field_flexible_group_visibility')) {
        $visibility_values = $group->get('field_flexible_group_visibility')->getValue();
        // Lets grab the rendered description for the group visibility.
        if (!empty($visibility_values)) {
          foreach ($visibility_values as $visibility_value) {
            if (!empty($visibility_value['value']) && is_string($visibility_value['value'])) {
              $group_visibility[$visibility_value['value']] = social_group_group_visibility_description($visibility_value['value']);
            }
          }
        }
        
      }

  }

  return $group_visibility;


}

/**
 * Get the allowed visibility of a group.
 *
 * @param Drupal\group\Entity\GroupInterface $group
 *   the Group interface.
 *
 * @return array
 *   Returns allowed visibility of a group.
 */
function _tm_flex_group_get_allowed_visibility(GroupInterface $group) {
  $group_type = $group->getGroupType();
  $group_type_id = $group_type->id();
  $allowed_visibility = [];


  if ($group_type_id === 'tm_training' || 
      $group_type_id === 'tm_community' ||
      $group_type_id === 'tm_conference') {

      // Try to retrieve allowed visibility from Group directly.
      $allowed_options = $group->get('field_group_allowed_visibility')
        ->getValue();
      foreach ($allowed_options as $option) {
        if (!empty($option['value']) && is_string($option['value'])) {
          $allowed_visibility[$option['value']] = social_group_allowed_visibility_description($option['value']);
        }
      }

  }
   
  return $allowed_visibility;

}

/**
 * Renders the group settings based on available fields for the hero.
 *
 * @param \Drupal\group\Entity\GroupInterface $group
 *   the Group interface.
 *
 * @return array
 *   the actual tooltip render array.
 */
function _tm_flex_group_render_group_settings_hero(GroupInterface $group) {
  $description = '';
  // Optional after 10.0.x we can render the group visibility.
  if ($group_visibility_option = _tm_flex_group_get_group_visibility($group)) {
    // Wrap our chosen description in a container.
    $description .= '<span class="title">' . t('Group visibility') . '</span>';
    $description .= '<div class="group-visibility-details container-background">';
    foreach ($group_visibility_option as $key => $group_visibility_string) {
      $description .= $group_visibility_string;
    }
    $description .= '</div>';
  }
  // Optional after 9.x we can render the allowed content visibility.
  if ($allowed_visibility_option = _tm_flex_group_get_allowed_visibility($group)) {
    // Wrap our chosen description in a container.
    $description .= '<span class="title">' . t('Group content visibility') . '</span>';
    $description .= '<div class="group-visibility-details container-background">';
    foreach ($allowed_visibility_option as $key => $allowed_visibility_string) {
      $description .= $allowed_visibility_string;
    }
    $description .= '</div>';
  }
  // Optional after 9.x we can render the join methods.
  if ($join_methods_option = _tm_flex_group_get_join_methods($group)) {
    // Wrap our chosen description in a container.
    $description .= '<span class="title">' . t('Join method') . '</span>';
    $description .= '<div class="group-visibility-details container-background">';
    foreach ($join_methods_option as $key => $join_methods_string) {
      $description .= $join_methods_string;
    }
    $description .= '</div>';
  }

  return social_group_render_tooltip('group_hero', t('Access permissions'), $description);
}

/**
 * Implements hook_form_alter().
 */
function tm_flex_group_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Add a checkbox for users to easily enable/disable course date and time.
  if (isset($form['field_course_opening_date'])) {
    $form['field_course_opening_date_status'] = [
      '#type' => 'checkbox',
      '#weight' => -1,
      '#title' => t('Enable open date and time'),
      '#description' => t("When enabled, course sections and other information can only be accessed by members after the course starts. Enrolment can only take place before the course has started.
<br>When not enabled, course sections and other information can be accessed right after enrolment."),
    '#default_value' => !empty($form['field_course_opening_date']['widget'][0]['value']['#default_value']),
    ];

    $form['field_course_opening_date']['widget'][0]['value']['#states'] = [
      'visible' => [
        'input[name="field_course_opening_date_status"]' => ['checked' => TRUE],
      ],
    ];

    // Set correct field group 'date_and_time'.
    $form['field_course_opening_date_status']['#group'] = 'group_date_and_time';
    $form['#group_children']['field_course_opening_date_status'] = $form['field_course_opening_date_status'];

    // Remove extra fieldset from datetime field.
    unset($form['field_course_opening_date']['widget'][0]['#theme_wrappers']);
  }

}

/**
 * Implements hook_entity_insert().
 */
function tm_flex_group_group_insert(GroupInterface $group) {
  // @todo Remove this when https://www.drupal.org/node/2702743 lands and make.
  // sure the settings will be implemented accordingly.

  $tm_flex_groups = tm_flex_group_get_flexible_group_types();
  unset($tm_flex_groups['flexible_group']);

  if (in_array($group->getGroupType()->id(),$tm_flex_groups)) {
    // Get the group owner.
    $account = $group->getOwner();
    // Get membership.
    $content = $group->getMember($account)->getGroupContent();
    // Delete the initial created membership.
    $content->delete();
    $grant_group_admin = FALSE;
    // If the user has this permission inside a group.
    if ($group->hasPermission('manage all groups', $account)) {
      // Then we grant this user de Group Admin role.
      $grant_group_admin = TRUE;
    }
    // When a CM+ creates a group, it is given the group_manager role
    // alongside the group_admin role to keep the full control over the group.
    if ($grant_group_admin) {
      // Delete the initial created membership.
      $content->delete();
      $plugin = $group->getGroupType()->getContentPlugin('group_membership');
      $values = [
        'group_roles' => [
          $group->bundle() . '-group_admin',
          $group->bundle() . '-group_manager',
        ],
      ];
      $group_content = GroupContent::create([
        'type' => $plugin->getContentTypeConfigId(),
        'gid' => $group->id(),
        'entity_id' => $group->getOwnerId(),
      ] + $values);
      $group_content->save();
    }
    else {
      // Create a new membership.
      $plugin = $group->getGroupType()->getContentPlugin('group_membership');
      $values = ['group_roles' => [$group->bundle() . '-group_manager']];
      $group_content = GroupContent::create([
        'type' => $plugin->getContentTypeConfigId(),
        'gid' => $group->id(),
        'entity_id' => $group->getOwnerId(),
      ] + $values);
      $group_content->save();
    }
  }
}








