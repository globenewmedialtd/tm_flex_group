<?php

/**
 * @file
 * The TM Flex Group Core.
 */

use Drupal\block\Entity\Block;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\group\Entity\Group;
use Drupal\group\Entity\GroupInterface;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\Plugin\views\row\EntityRow;
use Drupal\views\ViewExecutable;
use Drupal\views\Views;
use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\Core\Url;
use Drupal\tm_flex_group\EntityAccessHelper;
use Drupal\node\NodeInterface;

 /**
 * Helper function to get Flexible group types
 */
function tm_flex_group_get_flexible_group_types() {

  $flexible_group_types = [
    'flexible_group',
    'tm_training',
    'tm_community',
    'tm_conference'
  ];

  return $flexible_group_types;

}

 /**
 * Helper function to get All group types
 */
function tm_flex_group_get_group_types() {

  $group_types = [
    'flexible_group',
    'closed_group',
    'open_group'
  ];

  // Add secret group to $group_types
  if (\Drupal::moduleHandler()->moduleExists('social_group_secret')) {
    array_push($group_types, 'secret_group');
  }

  // Add tm_training group to $group_types  
  if (\Drupal::moduleHandler()->moduleExists('tm_flex_group_training')) {
    array_push($group_types, 'tm_training');
  }  

  // Add tm_community group to $group_types  
  if (\Drupal::moduleHandler()->moduleExists('tm_flex_group_community')) {
    array_push($group_types, 'tm_community');
  }  

  // Add tm_community group to $group_types  
  if (\Drupal::moduleHandler()->moduleExists('tm_flex_group_conference')) {
    array_push($group_types, 'tm_conference');
  } 

  return $group_types;

}

/**
 * Implements hook_menu_local_actions_alter().
 */
function tm_flex_group_menu_local_actions_alter(&$local_actions) {
  $group = _social_group_get_current_group();
  $user = \Drupal::currentUser();


  // Remove the social_group add member action on the
  // membership overview if we can't add members directly.
  // SM+ can still add members though.
  if ($group instanceof GroupInterface
    && in_array($group->getGroupType()->id(), 
    tm_flex_group_get_flexible_group_types())
    && !social_group_flexible_group_can_be_added($group)
    && !$user->hasPermission('manage all groups')
    && !$group->hasPermission('administer members', $user)
  ) {
    unset($local_actions['social_group.add_member']);
  }
}

/**
 * Implements hook_block_access().
 */
function tm_flex_group_block_access(Block $block, $operation, AccountInterface $account) {
  // This is a list of the blocks that this function cares about, if we're being
  // called for a different block we exit early.
  $block_id = $block->getPluginId();
  $managed_blocks = [
    'views_exposed_filter_block:newest_groups-page_all_groups',
    'views_block:groups-block_user_groups',
    'views_block:upcoming_events-upcoming_events_group',
    'views_block:latest_topics-group_topics_block',
    'views_block:group_managers-block_list_managers',
  ];
  // We don't care for other blocks.
  if (!in_array($block_id, $managed_blocks, FALSE)) {
    return AccessResult::neutral();
  }

  $group = _social_group_get_current_group();
  // We don't care about other group types in here.
  if ($group && in_array($group->getGroupType()->id(),tm_flex_group_get_flexible_group_types())) {
    // Only when users cant join directly, add the managers block
    // so they know who to contact.
    if ($operation === 'view' &&
      social_group_flexible_group_can_join_directly($group) &&
      $block->getPluginId() === 'views_block:group_managers-block_list_managers') {
      return AccessResult::forbidden();
    }

    // All users with permissions can see the rest.
    if ($account->hasPermission('manage all groups')) {
      return AccessResult::neutral();
    }

    if (!$group->getMember($account) &&
      !social_group_flexible_group_community_enabled($group) &&
      !social_group_flexible_group_public_enabled($group)) {
      // If it is flexible and the current user is not an member of this group,
      // and content visibility is not public and also not community
      // hide it.
      $forbidden_blocks = [
        'views_block:upcoming_events-upcoming_events_group',
        'views_block:latest_topics-group_topics_block',
      ];
      foreach ($forbidden_blocks as $forbidden_block) {
        if ($operation === 'view' && $block->getPluginId() === $forbidden_block) {
          return AccessResult::forbidden();
        }
      }
    }
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_node_access().
 */
function tm_flex_group_node_access(NodeInterface $node, $op, AccountInterface $account) {
  return EntityAccessHelper::getEntityAccessResult($node, $op, $account);
}

/**
 * Provide a method to alter the allowed content visibility for a group type.
 *
 * @param array $visibilities
 *   The visibilities list.
 * @param string $group_type_id
 *   The group type we alter the visibility setting for.
 *
 * @see social_group_get_allowed_visibility_options_per_group_type()
 *
 * @ingroup social_group_api
 */
function tm_flex_group_social_group_allowed_visibilities_alter(array &$visibilities, $group_type_id) {
  
  $flexible_group_types = tm_flex_group_get_flexible_group_types();
  // Remove the default flexible_group
  unset($flexible_group_types['flexible_group']);

  if (in_array($group_type_id,$flexible_group_types)) {

    $group = _social_group_get_current_group();

    if ($group !== NULL) {
      // Set all visibilities for that group to FALSE
      foreach($visibilities as $visibility => $value) {
        $visibilities[$visibility] = FALSE;
      }
            
      // Try to retrieve allowed options from Group directly.
      $allowed_options = $group->get('field_group_allowed_visibility')->getValue();
      foreach ($allowed_options as $option) {
        $value = $option['value'];
        $visibilities[$value] = TRUE;
      }      
    }
  }
}




